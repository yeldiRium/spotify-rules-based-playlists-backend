name: Release

on:
  push:
    branches:
      - 'main'

permissions:
  contents: write
  packages: write

jobs:
  release:
    name: Release app
    concurrency:
      group: release
    runs-on: ubuntu-latest

    steps:
    - name: Clone repository
      uses: actions/checkout@v3
      with:
        fetch-depth: '0'
    - name: Login to GitHub container registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Use Go
      uses: actions/setup-go@v3
      with:
        go-version: '1.18'

    - name: Run QA
      run: make

    - name: Get next version
      id: get_next_version
      uses: thenativeweb/get-next-version@2.2.2

    - name: Create new version
      if: ${{ steps.get_next_version.outputs.hasNextVersion == 'true' }}
      run: |
        git tag ${{steps.get_next_version.outputs.version}}
        git push origin ${{steps.get_next_version.outputs.version}}
    - name: Build artifacts
      if: ${{ steps.get_next_version.outputs.hasNextVersion == 'true' }}
      run: make build
    - name: Release new version
      if: ${{ steps.get_next_version.outputs.hasNextVersion == 'true' }}
      uses: ncipollo/release-action@v1
      with:
        artifacts: "build/*"
        tag: ${{ steps.get_next_version.outputs.version }}

    - name: Build and push (latest only)
      if: ${{ steps.get_next_version.outputs.hasNextVersion == 'false' }}
      uses: docker/build-push-action@v3
      with:
        push: true
        tags: ghcr.io/yeldirium/spotify-rules-based-playlists-backend:latest
        build-args: |
          version=${{ steps.get_next_version.outputs.version }}
    - name: Build and push (latest and versioned)
      if: ${{ steps.get_next_version.outputs.hasNextVersion == 'true' }}
      uses: docker/build-push-action@v3
      with:
        push: true
        tags: ghcr.io/yeldirium/spotify-rules-based-playlists-backend:latest,ghcr.io/yeldirium/spotify-rules-based-playlist-backend:${{steps.get_next_version.outputs.version}}
        build-args: |
          version=${{ steps.get_next_version.outputs.version }}
